# This file contains common pin mappings for the BigTreeTech SKR 2.
# To use this config, the firmware should be compiled for the
# STM32F407 with a "32KiB bootloader".
# !!!!! The "make flash" command does not work on the SKR 2. Instead,
# 1.running "make" command
# 2.copy the generated "out/klipper.bin" file to a file named "firmware.bin" on an SD card
# 3. restart the SKR 2 with that SD card.
[include fluidd.cfg]
[include macros.cfg]
# Due to BTT implementing a Marlin-specific safety feature,
# "anti-reversal stepper protection", this pin needs pulling
# high to pass power to stepper drivers and most FETs
[output_pin motor_power]
pin: PC13
value: 1
[endstop_phase]
[virtual_sdcard]
path: /home/klipper/printer_data/gcodes
on_error_gcode:
  CANCEL_PRINT
[pause_resume]
[exclude_object]
#  File location of stored varibales
[save_variables]
filename: /home/klipper/klipper_config/.variables.stb
[display_status]
############# CONNECT TO PRINTER WITH USB PORT ######################
[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f429xx_2E004F001450305031353020-if00
restart_method: command

#[mcu Pro_Micro]
#serial:
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ.
#   This parameter must be provided when using a serial port.
#baud: 250000
#   The baud rate to use. The default is 250000.
#canbus_uuid:
#   If using a device connected to a CAN bus then this sets the unique
#   chip identifier to connect to. This value must be provided when using
#   CAN bus for communication.
#canbus_interface:
#   If using a device connected to a CAN bus then this sets the CAN
#   network interface to use. The default is 'can0'.
#restart_method: arduino
#   This controls the mechanism the host will use to reset the
#   micro-controller. The choices are 'arduino', 'cheetah', 'rpi_usb',
#   and 'command'. The 'arduino' method (toggle DTR) is common on
#   Arduino boards and clones. The 'cheetah' method is a special
#   method needed for some Fysetc Cheetah boards. The 'rpi_usb' method
#   is useful on Raspberry Pi boards with micro-controllers powered
#   over USB - it briefly disables power to all USB ports to
#   accomplish a micro-controller reset. The 'command' method involves
#   sending a Klipper command to the micro-controller so that it can
#   reset itself. The default is 'arduino' if the micro-controller
#   communicates over a serial port, 'command' otherwise.

[printer]
kinematics: cartesian
max_velocity: 250
max_accel: 1200
max_z_velocity: 20
max_z_accel: 200
max_accel_to_decel: 600
#   A pseudo acceleration (in mm/s^2) controlling how fast the
#   toolhead may go from acceleration to deceleration. It is used to
#   reduce the top speed of short zig-zag moves (and thus reduce
#   printer vibration from these moves). The default is half of
#   max_accel.
square_corner_velocity: 5.0
#   The maximum velocity (in mm/s) that the toolhead may travel a 90
#   degree corner at. A non-zero value can reduce changes in extruder
#   flow rates by enabling instantaneous velocity changes of the
#   toolhead during cornering. This value configures the internal
#   centripetal velocity cornering algorithm; corners with angles
#   larger than 90 degrees will have a higher cornering velocity while
#   corners with angles less than 90 degrees will have a lower
#   cornering velocity. If this is set to zero then the toolhead will
#   decelerate to zero at each corner. The default is 5mm/s.

#######################################################################
###################     STEPPER  SETUP    #############################
#######################################################################
#########[ SKR 3 ]#########
[stepper_x]
step_pin: PD4
dir_pin: PD3
enable_pin: !PD6
microsteps: 16
rotation_distance: 39.970
#estep = 80.05807
endstop_pin: ^!PC1
position_endstop: -3.4
position_min: -3.4
position_max: 235
homing_speed: 80
homing_retract_dist: 2.0
homing_retract_speed:20
second_homing_speed:10
########[ STEP Y ]#########
[stepper_y]
step_pin: PA15
dir_pin: !PA8
enable_pin: !PD1
microsteps: 16
rotation_distance: 39.818
#estep = 80.36389
endstop_pin: ^!PC3
position_endstop: 0
position_max: 245
homing_speed: 80
homing_retract_dist: 2.0
homing_retract_speed:20
second_homing_speed:10
#########[ STEP Z ]#########
[stepper_z]
step_pin: PE2
dir_pin: PE3
enable_pin: !PE0
microsteps: 16
rotation_distance: 8
#estep = 400.3288
endstop_pin: probe:z_virtual_endstop
position_min:-5
position_max: 270
[stepper_z1]
step_pin: PD11
dir_pin: PD10
enable_pin: !PD13
microsteps: 16
rotation_distance: 8
#########[ STEP Extruder ]#########
[extruder]
step_pin: PD15
dir_pin: PD14
enable_pin: !PC7
microsteps: 16
rotation_distance: 33.22014261822478
#ESTEP=96.3271
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PB3
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA2
control: pid
pid_kp: 25.691
pid_ki: 1.223
pid_kd: 134.878
min_temp: 0
max_temp: 260
max_extrude_only_distance: 500.0
pressure_advance: 0.324
pressure_advance_smooth_time: 0.026

[tmc2209 stepper_x]
uart_pin: PD5
run_current: 0.920
stealthchop_threshold: 999999
#nterpolate: False
[tmc2209 stepper_y]
uart_pin: PD0
run_current: 0.920
stealthchop_threshold: 999999
#interpolate: False
[tmc2209 stepper_z]
uart_pin: PE1
run_current: 0.900
stealthchop_threshold: 999999
[tmc2209 stepper_z1]
uart_pin: PD12
run_current: 0.900
stealthchop_threshold: 999999
[tmc2209 extruder]
uart_pin: PC6
run_current: 0.920
stealthchop_threshold: 0

########[ SKR 2 ]#########
########[ STEP X ]#########
# [stepper_x]
# step_pin: PE2
# dir_pin: !PE1
# enable_pin: !PE3
# microsteps: 16
# rotation_distance: 39.970
# estep = 80.05807
# endstop_pin: ^!PC1
# position_endstop: -3.4
# position_min: -3.4
# position_max: 235
# homing_speed: 80
# homing_retract_dist: 2.0
# homing_retract_speed:20
# second_homing_speed:10
#######[ STEP Y ]#########
# [stepper_y]
# step_pin: PD5
# dir_pin: PD4
# enable_pin: !PD6
# microsteps: 16
# rotation_distance: 39.818
# estep = 80.36389
# endstop_pin: ^!PC3
# position_endstop: 0
# position_max: 245
# homing_speed: 80
# homing_retract_dist: 2.0
# homing_retract_speed:20
# second_homing_speed:10
########[ STEP Z ]#########
# [stepper_z]
# step_pin: PA15
# dir_pin: PA8
# enable_pin: !PD1
# microsteps: 16
# rotation_distance: 8
# estep = 400.3288
# endstop_pin: probe:z_virtual_endstop
# position_min:-5
# position_max: 270
# [stepper_z1]
# step_pin: PD11
# dir_pin: PD10
# enable_pin: !PD13
# microsteps: 16
# rotation_distance: 4
########[ STEP Extruder ]#########
# [extruder]
# step_pin: PD15
# dir_pin: !PD14
# enable_pin: !PC7
# microsteps: 16
# rotation_distance: 33.22014261822478
# ESTEP=96.3271
# nozzle_diameter: 0.400
# filament_diameter: 1.750
# heater_pin: PB3
# sensor_type: EPCOS 100K B57560G104F
# sensor_pin: PA2
# control: pid
# pid_kp: 25.691
# pid_ki: 1.223
# pid_kd: 134.878
# min_temp: 0
# max_temp: 260
# max_extrude_only_distance: 500.0
# pressure_advance: 0.324
# pressure_advance_smooth_time: 0.026
######[ TMC2209 ]########
# [tmc2209 stepper_x]
# uart_pin: PE0
# run_current: 0.920
# stealthchop_threshold: 999999
#nterpolate: False
# [tmc2209 stepper_y]
# uart_pin: PD3
# run_current: 0.920
# stealthchop_threshold: 999999
#interpolate: False
# [tmc2209 stepper_z]
# uart_pin: PD0
# run_current: 0.900
# stealthchop_threshold: 999999
# [tmc2209 stepper_z1]
# uart_pin: PD12
# run_current: 0.900
# stealthchop_threshold: 999999
# [tmc2209 extruder]
# uart_pin: PC6
# run_current: 0.920
# stealthchop_threshold: 0


#######################################################################
###################    PROBE - BL TOUCH    ############################
#######################################################################
#########[ SKR 3 ]#########
[output_pin probe_enable]
pin: PE5 # The control IO on the SKR 3 is PE5
value: 0 # Probe default retracted
# Probe deploy command
[gcode_macro Probe_Deploy]
gcode:
SET_PIN PIN=probe_enable VALUE=1
# Probe stow command
[gcode_macro Probe_Stow]
gcode:
SET_PIN PIN=probe_enable VALUE=0
[probe]
BIQU MicroProbe V2 User Manual
pin: ^PC13 # The detection IO on the SKR 3 is PC13, V1 should be ^PC13 means high-level triggered, V2 should be ^!PC13 means low -level triggered.
deactivate_on_each_sample: False
x_offset: -0.1
y_offset: -34
z_offset: 0
speed: 5.0
activate_gcode:
Probe_Deploy
G4 P500 # Allow 500 milliseconds for the probe to deploy
deactivate_gcode:
Probe_Stow
#########[ SKR 2 ]#########
# [bltouch]
# sensor_pin: ^PE4
# control_pin: PE5
# x_offset: -0.1
# y_offset: -34
# z_offset: 0
# probe_with_touch_mode: True
# stow_on_each_sample: False
[safe_z_home]
home_xy_position: 117.5, 145.5 # Change coordinates to the center of your print bed
speed: 100
z_hop: 8                 # Move up 8mm
z_hop_speed: 4
[bed_mesh]
speed: 80
horizontal_move_z: 4
mesh_min: 5, 5
mesh_max: 230, 210
probe_count: 11
fade_start: 2.0
fade_end: 20
mesh_pps: 10, 10
algorithm: bicubic
bicubic_tension: 0.3

#######################################################################
########################    Sensors    ################################
#######################################################################
# [temperature_sensor mcu]
# sensor_type: temperature_mcu

[temperature_sensor Laptop]
sensor_type: temperature_host

#[temperature_sensor tmc2209_stepper_x]
#sensor_type: temperature_host
#min_temp: 10
#max_temp: 100
#
#[temperature_sensor tmc2209_stepper_y]
#sensor_type: temperature_host
#min_temp: 10
#max_temp: 100
#
#[temperature_sensor tmc2209_stepper_z]
#sensor_type: temperature_host
#min_temp: 10
#max_temp: 100
#
#[temperature_sensor tmc2209_stepper_z1]
#sensor_type: temperature_host
#min_temp: 10
#max_temp: 100
#
#[temperature_sensor tmc2209_extruder]
#sensor_type: temperature_host
#min_temp: 10
#max_temp: 100

[thermistor my_thermistor]
temperature1: 0
resistance1: 
temperature1: 15.7
resistance1: 15120
temperature2: 25
resistance2: 10450
temperature3: 60
resistance3: 2940
#

[temperature_sensor CPU Cooler]
sensor_type: my_thermistor
sensor_pin: PA3
#min_temp: -05
#max_temp: 75




########################################################################
######################[ FANS & HEATED BED ]##########################
[fan]
pin: PB6

# [temperature_fan CPU_Cooler]
# 3-pin computer fan 
# pin: PB6
# # RPM monitoring:
# tachometer_pin: ^PC2
# tachometer_ppr: 2
# control: PID
# max_delta: 5
# sensor_type: temperature_mcu
# # sensor_pin: PA3
# # min_temp:0
# # max_temp:100
# target_temp: 40.0
#   A temperature (in Celsius) that will be the target temperature.
#   The default is 40 degrees.
#cycle_time:
#hardware_pwm:
# kick_start_time: 0.500
#off_below:
#   See the "extruder" section for a description of the above parameters.
#pid_Kp:
#pid_Ki:
#pid_Kd:
#   The proportional (pid_Kp), integral (pid_Ki), and derivative
#   (pid_Kd) settings for the PID feedback control system. Klipper
#   evaluates the PID settings with the following general formula:
#     fan_pwm = max_power - (Kp*e + Ki*integral(e) - Kd*derivative(e)) / 255
#   Where "e" is "target_temperature - measured_temperature" and
#   "fan_pwm" is the requested fan rate with 0.0 being full off and
#   1.0 being full on. The pid_Kp, pid_Ki, and pid_Kd parameters must
#   be provided when the PID control algorithm is enabled.
#pid_deriv_time: 2.0
#   A time value (in seconds) over which temperature measurements will
#   be smoothed when using the PID control algorithm. This may reduce
#   the impact of measurement noise. The default is 2 seconds.
#max_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when the sensor temperature exceeds the set value.
#   The default is 1.0.
#min_speed: 0.3
#   The minimum fan speed (expressed as a value from 0.0 to 1.0) that
#   the fan will be set to for PID temperature fans.
#   The default is 0.3.
# gcode_id: CPU_COOLER
#   If set, the temperature will be reported in M105 queries using the
#   given id. The default is to not report the temperature via M105.


[temperature_fan CPU_Cooler]
pin: PB7
tachometer_pin: ^PC2
tachometer_ppr: 2
control: watermark
max_delta: 2
sensor_type: temperature_mcu
# # sensor_pin: PA3
min_temp:0
max_temp:100
target_temp: 40.0
#   A temperature (in Celsius) that will be the target temperature.
#   The default is 40 degrees.
#cycle_time:
#hardware_pwm:
# kick_start_time: 0.500
#off_below:
#   See the "extruder" section for a description of the above parameters.
#pid_Kp:
#pid_Ki:
#pid_Kd:
#   The proportional (pid_Kp), integral (pid_Ki), and derivative
#   (pid_Kd) settings for the PID feedback control system. Klipper
#   evaluates the PID settings with the following general formula:
#     fan_pwm = max_power - (Kp*e + Ki*integral(e) - Kd*derivative(e)) / 255
#   Where "e" is "target_temperature - measured_temperature" and
#   "fan_pwm" is the requested fan rate with 0.0 being full off and
#   1.0 being full on. The pid_Kp, pid_Ki, and pid_Kd parameters must
#   be provided when the PID control algorithm is enabled.
#pid_deriv_time: 2.0
#   A time value (in seconds) over which temperature measurements will
#   be smoothed when using the PID control algorithm. This may reduce
#   the impact of measurement noise. The default is 2 seconds.
#max_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when the sensor temperature exceeds the set value.
#   The default is 1.0.
#min_speed: 0.3
#   The minimum fan speed (expressed as a value from 0.0 to 1.0) that
#   the fan will be set to for PID temperature fans.
#   The default is 0.3.
gcode_id: CPU_COOLER
#   If set, the temperature will be reported in M105 queries using the
#   given id. The default is to not report the temperature via M105.


[controller_fan Stepper_Fan]
pin: PB5
#max_power:
#shutdown_speed:
#cycle_time:
#hardware_pwm:
kick_start_time: 0.500
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#enable_pin:
#   See the "fan" section for a description of the above parameters.
#fan_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when a heater or stepper driver is active.
#   The default is 1.0
idle_timeout:300
#   The amount of time (in seconds) after a stepper driver or heater
#   was active and the fan should be kept running. The default
#   is 30 seconds.
idle_speed: 0.75
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when a heater or stepper driver was active and
#   before the idle_timeout is reached. The default is fan_speed.
#heater:
stepper: stepper_x
#   Name of the config section defining the heater/stepper that this fan
#   is associated with. If a comma separated list of heater/stepper names
#   is provided here, then the fan will be enabled when any of the given
#   heaters/steppers are enabled. The default heater is "extruder", the
#   default stepper is all of them.


########################TestSectionForFans
# [fan_generic UnderFan]
# pin:PB6
# max_power: 0.8
# #shutdown_speed:
# #cycle_time:
# #hardware_pwm:
# # kick_start_time:
# #off_below:
# tachometer_pin: ^PC2
# tachometer_ppr: 2
# # tachometer_poll_interval:
# #enable_pin:

[heater_bed]
heater_pin: PD7
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA1
control: pid
pid_kp: 70.876
pid_ki: 1.150
pid_kd: 1092.377
min_temp: 0
max_temp: 130



########################################
# LEDS
########################################
[neopixel hotend_leds]
pin: PE6
chain_count: 2
#color_order: G, R, B, 
initial_RED: 1.0
initial_GREEN: 1.0
initial_BLUE: 1.0
initial_WHITE: 0.0
########################################
# EXP1 / EXP2 (display) pins
########################################
[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE10, EXP1_7=PE12, EXP1_9=<GND>,
    EXP1_2=PB0, EXP1_4=PE9, EXP1_6=PE11, EXP1_8=PE13, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,
    EXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>

# See the sample-lcd.cfg file for definitions of common LCD displays.
[display]
lcd_type: emulated_st7920
spi_software_miso_pin: EXP1_6
spi_software_mosi_pin: EXP1_3
spi_software_sclk_pin: EXP1_5
en_pin: EXP1_4
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
[gcode_arcs]
resolution: 0.5
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.
#[input_shaper]
#shaper_freq_y: 33
#shaper_type_x: ei
#shaper_type_y: ei #   A type of the input shaper to use for both X and Y axes. Supported
#                 #   shapers are zv, mzv, zvd, ei, 2hump_ei, and 3hump_ei. The default
#                 #   is mzv input shaper.
#damping_ratio_x: 0.1
#damping_ratio_y: 0.1      
#[adxl345]
#cs_pin:
#   The SPI enable pin for the sensor. This parameter must be provided.
#spi_speed: 5000000
#   The SPI speed (in hz) to use when communicating with the chip.
#   The default is 5000000.
#spi_bus:
#spi_software_sclk_pin:
#spi_software_mosi_pin:
#spi_software_miso_pin:
#   See the "common SPI settings" section for a description of the
#   above parameters.
#axes_map: x, y, z
#   The accelerometer axis for each of the printer's X, Y, and Z axes.
#   This may be useful if the accelerometer is mounted in an
#   orientation that does not match the printer orientation. For
#   example, one could set this to "y, x, z" to swap the X and Y axes.
#   It is also possible to negate an axis if the accelerometer
#   direction is reversed (eg, "x, z, -y"). The default is "x, y, z".
#rate: 3200
#   Output data rate for ADXL345. ADXL345 supports the following data
#   rates: 3200, 1600, 800, 400, 200, 100, 50, and 25. Note that it is
#   not recommended to change this rate from the default 3200, and
#   rates below 800 will considerably affect the quality of resonance
#   measurements.

#[resonance_tester]
#probe_points:
#   A list of X, Y, Z coordinates of points (one point per line) to test
#   resonances at. At least one point is required. Make sure that all
#   points with some safety margin in XY plane (~a few centimeters)
#   are reachable by the toolhead.
#accel_chip:
#   A name of the accelerometer chip to use for measurements. If
#   adxl345 chip was defined without an explicit name, this parameter
#   can simply reference it as "accel_chip: adxl345", otherwise an
#   explicit name must be supplied as well, e.g. "accel_chip: adxl345
#   my_chip_name". Either this, or the next two parameters must be
#   set.
#accel_chip_x:
#accel_chip_y:
#   Names of the accelerometer chips to use for measurements for each
#   of the axis. Can be useful, for instance, on bed slinger printer,
#   if two separate accelerometers are mounted on the bed (for Y axis)
#   and on the toolhead (for X axis). These parameters have the same
#   format as 'accel_chip' parameter. Only 'accel_chip' or these two
#   parameters must be provided.
#max_smoothing:
#   Maximum input shaper smoothing to allow for each axis during shaper
#   auto-calibration (with 'SHAPER_CALIBRATE' command). By default no
#   maximum smoothing is specified. Refer to Measuring_Resonances guide
#   for more details on using this feature.
#min_freq: 5
#   Minimum frequency to test for resonances. The default is 5 Hz.
#max_freq: 133.33
#   Maximum frequency to test for resonances. The default is 133.33 Hz.
#accel_per_hz: 75
#   This parameter is used to determine which acceleration to use to
#   test a specific frequency: accel = accel_per_hz * freq. Higher the
#   value, the higher is the energy of the oscillations. Can be set to
#   a lower than the default value if the resonances get too strong on
#   the printer. However, lower values make measurements of
#   high-frequency resonances less precise. The default value is 75
#   (mm/sec).
#hz_per_sec: 1
#   Determines the speed of the test. When testing all frequencies in
#   range [min_freq, max_freq], each second the frequency increases by
#   hz_per_sec. Small values make the test slow, and the large values
#   will decrease the precision of the test. The default value is 1.0
#   (Hz/sec == sec^-2).



#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# 