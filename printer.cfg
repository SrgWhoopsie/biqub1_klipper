# This file contains common pin mappings for the BIGTREETECH SKR mini
# E3 v3.0. To use this config, the firmware should be compiled for the
# STM32G0B1 with a "8KiB bootloader" and USB communication/USART.

# The "make flash" command does not work on the SKR mini E3. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR
# mini E3 with that SD card.

# See docs/Config_Reference.md for a description of parameters.
[include fluidd.cfg]
[include macros.cfg]
# Due to BTT implementing a Marlin-specific safety feature,
# "anti-reversal stepper protection", this pin needs pulling
# high to pass power to stepper drivers and most FETs
# [output_pin motor_power]
# pin: PC13
# value: 1
# [endstop_phase]
[virtual_sdcard]
path: /home/klipper/printer_data/gcodes
on_error_gcode:
  CANCEL_PRINT
[pause_resume]
[exclude_object]
#  File location of stored varibales
[save_variables]
filename: /home/klipper/klipper_config/.variables.stb
[display_status]
############# CONNECT TO PRINTER WITH USB PORT ######################
[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f429xx_2E004F001450305031353020-if00
restart_method: command

#[mcu Pro_Micro]
#serial:
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ.
#   This parameter must be provided when using a serial port.
#baud: 250000
#   The baud rate to use. The default is 250000.
#canbus_uuid:
#   If using a device connected to a CAN bus then this sets the unique
#   chip identifier to connect to. This value must be provided when using
#   CAN bus for communication.
#canbus_interface:
#   If using a device connected to a CAN bus then this sets the CAN
#   network interface to use. The default is 'can0'.
#restart_method: arduino
#   This controls the mechanism the host will use to reset the
#   micro-controller. The choices are 'arduino', 'cheetah', 'rpi_usb',
#   and 'command'. The 'arduino' method (toggle DTR) is common on
#   Arduino boards and clones. The 'cheetah' method is a special
#   method needed for some Fysetc Cheetah boards. The 'rpi_usb' method
#   is useful on Raspberry Pi boards with micro-controllers powered
#   over USB - it briefly disables power to all USB ports to
#   accomplish a micro-controller reset. The 'command' method involves
#   sending a Klipper command to the micro-controller so that it can
#   reset itself. The default is 'arduino' if the micro-controller
#   communicates over a serial port, 'command' otherwise.

[printer]
kinematics: cartesian
max_velocity: 250
max_accel: 1500
max_z_velocity: 20
max_z_accel: 200
max_accel_to_decel: 700
#   A pseudo acceleration (in mm/s^2) controlling how fast the
#   toolhead may go from acceleration to deceleration. It is used to
#   reduce the top speed of short zig-zag moves (and thus reduce
#   printer vibration from these moves). The default is half of
#   max_accel.
square_corner_velocity: 5.0
#   The maximum velocity (in mm/s) that the toolhead may travel a 90
#   degree corner at. A non-zero value can reduce changes in extruder
#   flow rates by enabling instantaneous velocity changes of the
#   toolhead during cornering. This value configures the internal
#   centripetal velocity cornering algorithm; corners with angles
#   larger than 90 degrees will have a higher cornering velocity while
#   corners with angles less than 90 degrees will have a lower
#   cornering velocity. If this is set to zero then the toolhead will
#   decelerate to zero at each corner. The default is 5mm/s.

#######################################################################
###################     STEPPER  SETUP    #############################
#######################################################################
#########[ STEP X ]#########

[stepper_x]
step_pin: PB13
dir_pin: !PB12
enable_pin: !PB14
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC0
position_endstop: 0
position_max: 235
homing_speed: 50
homing_retract_dist: 2.0
homing_retract_speed:20
second_homing_speed:10

########[ STEP Y ]#########

[stepper_y]
step_pin: PB10
dir_pin: !PB2
enable_pin: !PB11
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC1
position_endstop: 0
position_max: 235
homing_speed: 50
homing_retract_dist: 2.0
homing_retract_speed:20
second_homing_speed:10

#########[ STEP Z ]#########

[stepper_z]
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 8
# endstop_pin: ^PC2
# position_endstop: 0.0
endstop_pin: probe:z_virtual_endstop
position_max: 250
position_min: -2

#########[ STEP Extruder ]#########

[extruder]
step_pin: PB3
dir_pin: !PB4
enable_pin: !PD1
microsteps: 16
rotation_distance: 33.500
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
control: pid
pid_Kp: 28.72
pid_Ki: 2.62
pid_Kd: 78.81
min_temp: 0
max_temp: 250
max_extrude_only_distance: 500.0
pressure_advance: 0.324
pressure_advance_smooth_time: 0.026

######[ TMC2209 ]########

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
run_current: 0.880
# hold_current: 0.500
stealthchop_threshold: 0

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
run_current: 0.880
# hold_current: 0.500
stealthchop_threshold: 0

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
run_current: 0.880
# hold_current: 0.500
stealthchop_threshold: 0

[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
run_current: 0.880
# hold_current: 0.500
stealthchop_threshold: 0

#######################################################################
###################    PROBE - BL TOUCH    ############################

[bltouch]
sensor_pin: PC14
control_pin: PA1
x_offset: -3
y_offset: -55
# z_offset: -3.0
probe_with_touch_mode: True
stow_on_each_sample: False

[safe_z_home]
home_xy_position: 113, 145.5 # Change coordinates to the center of your print bed
speed: 100
z_hop: 8                 # Move up 8mm
z_hop_speed: 10

[bed_mesh]
speed: 80
horizontal_move_z: 5
mesh_min: 10, 10
mesh_max: 210, 210
probe_count: 21
fade_start: 1.0
fade_end: 20
mesh_pps: 4, 4
algorithm: bicubic
bicubic_tension: 0.3
# faulty_region_1_min: 0, 235
# faulty_region_1_max: 60, 180

########################################################################
######################[ FANS & HEATED BED ]##########################

[controller_fan my_controller_fan]
pin: PC7
#max_power:
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time:
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#enable_pin:
#   See the "fan" section for a description of the above parameters.
#fan_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when a heater or stepper driver is active.
#   The default is 1.0
idle_timeout: 300
#   The amount of time (in seconds) after a stepper driver or heater
#   was active and the fan should be kept running. The default
#   is 30 seconds.
idle_speed: 75
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when a heater or stepper driver was active and
#   before the idle_timeout is reached. The default is fan_speed.
#heater:
stepper: stepper_y
#   Name of the config section defining the heater/stepper that this fan
#   is associated with. If a comma separated list of heater/stepper names
#   is provided here, then the fan will be enabled when any of the given
#   heaters/steppers are enabled. The default heater is "extruder", the
#   default stepper is all of them.


[heater_fan nozzle_cooling_fan]
pin: PC6

[heater_fan heatbreak_fan]
pin: PB15
heater: extruder
heater_temp: 75.0

[heater_bed]
heater_pin: PC9
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC4
control: pid
pid_Kp: 128  
pid_Ki: 24.59
pid_Kd: 78.81
min_temp: 0
max_temp: 130
########################################
# LEDS
########################################
# [neopixel hotend_leds]
# pin: PA8
# chain_count: 4
color_order: G, R, B, 
# initial_RED: 1.0
# initial_GREEN: 1.0
# initial_BLUE: 1.0
# initial_WHITE: 1.0
########################################
# EXP1 / EXP2 (display) pins
########################################
[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>


######################################################################
#  BigTreeTech TFT TouchScreen emulated 12864 mode
######################################################################

[display]
lcd_type: emulated_st7920
spi_software_miso_pin: PD8 # status led, Virtual MISO
spi_software_mosi_pin: PD6
spi_software_sclk_pin: PB9
en_pin: PB8
encoder_pins: ^PA10, ^PA9
click_pin: ^!PA15

[output_pin beeper]
pin: PB5

[gcode_arcs]
resolution: 0.5
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.
#[input_shaper]
#shaper_freq_y: 33
#shaper_type_x: ei
#shaper_type_y: ei #   A type of the input shaper to use for both X and Y axes. Supported
#                 #   shapers are zv, mzv, zvd, ei, 2hump_ei, and 3hump_ei. The default
#                 #   is mzv input shaper.
#damping_ratio_x: 0.1
#damping_ratio_y: 0.1      
#[adxl345]
#cs_pin:
#   The SPI enable pin for the sensor. This parameter must be provided.
#spi_speed: 5000000
#   The SPI speed (in hz) to use when communicating with the chip.
#   The default is 5000000.
#spi_bus:
#spi_software_sclk_pin:
#spi_software_mosi_pin:
#spi_software_miso_pin:
#   See the "common SPI settings" section for a description of the
#   above parameters.
#axes_map: x, y, z
#   The accelerometer axis for each of the printer's X, Y, and Z axes.
#   This may be useful if the accelerometer is mounted in an
#   orientation that does not match the printer orientation. For
#   example, one could set this to "y, x, z" to swap the X and Y axes.
#   It is also possible to negate an axis if the accelerometer
#   direction is reversed (eg, "x, z, -y"). The default is "x, y, z".
#rate: 3200
#   Output data rate for ADXL345. ADXL345 supports the following data
#   rates: 3200, 1600, 800, 400, 200, 100, 50, and 25. Note that it is
#   not recommended to change this rate from the default 3200, and
#   rates below 800 will considerably affect the quality of resonance
#   measurements.

#[resonance_tester]
#probe_points:
#   A list of X, Y, Z coordinates of points (one point per line) to test
#   resonances at. At least one point is required. Make sure that all
#   points with some safety margin in XY plane (~a few centimeters)
#   are reachable by the toolhead.
#accel_chip:
#   A name of the accelerometer chip to use for measurements. If
#   adxl345 chip was defined without an explicit name, this parameter
#   can simply reference it as "accel_chip: adxl345", otherwise an
#   explicit name must be supplied as well, e.g. "accel_chip: adxl345
#   my_chip_name". Either this, or the next two parameters must be
#   set.
#accel_chip_x:
#accel_chip_y:
#   Names of the accelerometer chips to use for measurements for each
#   of the axis. Can be useful, for instance, on bed slinger printer,
#   if two separate accelerometers are mounted on the bed (for Y axis)
#   and on the toolhead (for X axis). These parameters have the same
#   format as 'accel_chip' parameter. Only 'accel_chip' or these two
#   parameters must be provided.
#max_smoothing:
#   Maximum input shaper smoothing to allow for each axis during shaper
#   auto-calibration (with 'SHAPER_CALIBRATE' command). By default no
#   maximum smoothing is specified. Refer to Measuring_Resonances guide
#   for more details on using this feature.
#min_freq: 5
#   Minimum frequency to test for resonances. The default is 5 Hz.
#max_freq: 133.33
#   Maximum frequency to test for resonances. The default is 133.33 Hz.
#accel_per_hz: 75
#   This parameter is used to determine which acceleration to use to
#   test a specific frequency: accel = accel_per_hz * freq. Higher the
#   value, the higher is the energy of the oscillations. Can be set to
#   a lower than the default value if the resonances get too strong on
#   the printer. However, lower values make measurements of
#   high-frequency resonances less precise. The default value is 75
#   (mm/sec).
#hz_per_sec: 1
#   Determines the speed of the test. When testing all frequencies in
#   range [min_freq, max_freq], each second the frequency increases by
#   hz_per_sec. Small values make the test slow, and the large values
#   will decrease the precision of the test. The default value is 1.0
#   (Hz/sec == sec^-2).


#######################################################################
########################    Sensors    ################################
#######################################################################
[temperature_sensor mcu]
sensor_type: temperature_mcu
#sensor_mcu: mcu
#   The micro-controller to read from. The default is "mcu".
#sensor_temperature1:20
#sensor_adc1:0.4
#   Specify the above two parameters (a temperature in Celsius and an
#   ADC value as a float between 0.0 and 1.0) to calibrate the
#   micro-controller temperature. This may improve the reported
#   temperature accuracy on some chips. A typical way to obtain this
#   calibration information is to completely remove power from the
#   printer for a few hours (to ensure it is at the ambient
#   temperature), then power it up and use the QUERY_ADC command to
#   obtain an ADC measurement. Use some other temperature sensor on
#   the printer to find the corresponding ambient temperature. The
#   default is to use the factory calibration data on the
#   micro-controller (if applicable) or the nominal values from the
#   micro-controller specification.

#[temperature_sensor tmc2209_stepper_x]
#sensor_type: temperature_host
#min_temp: 10
#max_temp: 100
#
#[temperature_sensor tmc2209_stepper_y]
#sensor_type: temperature_host
#min_temp: 10
#max_temp: 100
#
#[temperature_sensor tmc2209_stepper_z]
#sensor_type: temperature_host
#min_temp: 10
#max_temp: 100
#
#[temperature_sensor tmc2209_stepper_z1]
#sensor_type: temperature_host
#min_temp: 10
#max_temp: 100
#
#[temperature_sensor tmc2209_extruder]
#sensor_type: temperature_host
#min_temp: 10
#max_temp: 100

#[thermistor my_thermistor]
##temperature1: 0
##resistance1: 
#temperature1: 15.7
#resistance1: 15120
#temperature2: 25
#resistance2: 10450
#temperature3: 60
#resistance3: 2940
#
#[temperature_sensor External]
#sensor_type: my_thermistor
#sensor_pin: PA3
#min_temp: -05
#max_temp: 75

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.

